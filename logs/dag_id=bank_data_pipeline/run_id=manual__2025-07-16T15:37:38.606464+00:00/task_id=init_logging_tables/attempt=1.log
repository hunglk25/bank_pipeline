[2025-07-16T15:39:36.455+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T15:39:36.506+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables manual__2025-07-16T15:37:38.606464+00:00 [queued]>
[2025-07-16T15:39:36.516+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables manual__2025-07-16T15:37:38.606464+00:00 [queued]>
[2025-07-16T15:39:36.517+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T15:39:36.533+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-16 15:37:38.606464+00:00
[2025-07-16T15:39:36.545+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=302) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T15:39:36.546+0000] {standard_task_runner.py:63} INFO - Started process 303 to run task
[2025-07-16T15:39:36.545+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'manual__2025-07-16T15:37:38.606464+00:00', '--job-id', '5', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmpemo358r5']
[2025-07-16T15:39:36.548+0000] {standard_task_runner.py:91} INFO - Job 5: Subtask init_logging_tables
[2025-07-16T15:39:36.569+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T15:39:36.622+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables manual__2025-07-16T15:37:38.606464+00:00 [running]> on host 0cebe846fd9f
[2025-07-16T15:39:36.750+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-16T15:37:38.606464+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-07-16T15:37:38.606464+00:00'
[2025-07-16T15:39:36.751+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T15:39:36.768+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T15:39:36.770+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T15:39:36.770+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T15:39:36.773+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T15:39:36.782+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T15:39:36.789+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T15:39:36.806+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=manual__2025-07-16T15:37:38.606464+00:00, execution_date=20250716T153738, start_date=20250716T153936, end_date=20250716T153936
[2025-07-16T15:39:36.840+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T15:39:36.868+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T15:39:36.906+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T15:39:36.907+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
