[2025-07-16T15:04:01.052+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T15:04:01.104+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:04:01.115+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:04:01.116+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T15:04:01.133+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T15:04:01.144+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=393) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T15:04:01.145+0000] {standard_task_runner.py:63} INFO - Started process 401 to run task
[2025-07-16T15:04:01.146+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmpsj67l9x3']
[2025-07-16T15:04:01.150+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T15:04:01.175+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T15:04:01.236+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host e30ce8556a76
[2025-07-16T15:04:01.313+0000] {abstractoperator.py:725} ERROR - Exception rendering Jinja template for task 'init_logging_tables', field 'sql'. Template: '/opt/***/sql/create_log_tables.sql'
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/abstractoperator.py", line 717, in _do_render_template_fields
    rendered_content = self.render_template(
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/template/templater.py", line 166, in render_template
    template = jinja_env.get_template(value)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 1010, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 969, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 125, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 204, in get_source
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: /opt/airflow/sql/create_log_tables.sql
[2025-07-16T15:04:01.315+0000] {taskinstance.py:2905} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 2479, in _run_raw_task
    self._execute_task_with_callbacks(context, test_mode, session=session)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 2633, in _execute_task_with_callbacks
    task_orig = self.render_templates(context=context, jinja_env=jinja_env)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3094, in render_templates
    original_task.render_template_fields(context, jinja_env)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 1336, in render_template_fields
    self._do_render_template_fields(self, self.template_fields, context, jinja_env, set())
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/abstractoperator.py", line 717, in _do_render_template_fields
    rendered_content = self.render_template(
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/template/templater.py", line 166, in render_template
    template = jinja_env.get_template(value)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 1010, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 969, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 125, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 204, in get_source
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: /opt/airflow/sql/create_log_tables.sql
[2025-07-16T15:04:01.333+0000] {taskinstance.py:1206} INFO - Marking task as UP_FOR_RETRY. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T150401, end_date=20250716T150401
[2025-07-16T15:04:01.349+0000] {standard_task_runner.py:110} ERROR - Failed to execute job 2 for task init_logging_tables (/opt/airflow/sql/create_log_tables.sql; 401)
[2025-07-16T15:04:01.399+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 1
[2025-07-16T15:04:01.430+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T15:04:01.457+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2025-07-16T15:04:01.458+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T15:09:23.429+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T15:09:23.484+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:09:23.496+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:09:23.496+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T15:09:23.513+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T15:09:23.524+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=240) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T15:09:23.526+0000] {standard_task_runner.py:63} INFO - Started process 241 to run task
[2025-07-16T15:09:23.524+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmpe0brqgb_']
[2025-07-16T15:09:23.526+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T15:09:23.547+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T15:09:23.610+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 966f14673c74
[2025-07-16T15:09:23.682+0000] {abstractoperator.py:725} ERROR - Exception rendering Jinja template for task 'init_logging_tables', field 'sql'. Template: '/opt/***/sql/create_log_tables.sql'
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/abstractoperator.py", line 717, in _do_render_template_fields
    rendered_content = self.render_template(
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/template/templater.py", line 166, in render_template
    template = jinja_env.get_template(value)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 1010, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 969, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 125, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 204, in get_source
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: /opt/airflow/sql/create_log_tables.sql
[2025-07-16T15:09:23.685+0000] {taskinstance.py:2905} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 2479, in _run_raw_task
    self._execute_task_with_callbacks(context, test_mode, session=session)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 2633, in _execute_task_with_callbacks
    task_orig = self.render_templates(context=context, jinja_env=jinja_env)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3094, in render_templates
    original_task.render_template_fields(context, jinja_env)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 1336, in render_template_fields
    self._do_render_template_fields(self, self.template_fields, context, jinja_env, set())
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/abstractoperator.py", line 717, in _do_render_template_fields
    rendered_content = self.render_template(
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/template/templater.py", line 166, in render_template
    template = jinja_env.get_template(value)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 1010, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 969, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 125, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 204, in get_source
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: /opt/airflow/sql/create_log_tables.sql
[2025-07-16T15:09:23.698+0000] {taskinstance.py:1206} INFO - Marking task as UP_FOR_RETRY. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T150923, end_date=20250716T150923
[2025-07-16T15:09:23.716+0000] {standard_task_runner.py:110} ERROR - Failed to execute job 2 for task init_logging_tables (/opt/airflow/sql/create_log_tables.sql; 241)
[2025-07-16T15:09:23.740+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 1
[2025-07-16T15:09:23.767+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T15:09:23.793+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2025-07-16T15:09:23.796+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T15:17:24.849+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T15:17:24.902+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:17:24.915+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:17:24.916+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T15:17:24.934+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T15:17:24.949+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=200) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T15:17:24.948+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmp3od656cr']
[2025-07-16T15:17:24.951+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T15:17:24.951+0000] {standard_task_runner.py:63} INFO - Started process 201 to run task
[2025-07-16T15:17:24.970+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T15:17:25.022+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 4c2c441a4888
[2025-07-16T15:17:25.090+0000] {abstractoperator.py:725} ERROR - Exception rendering Jinja template for task 'init_logging_tables', field 'sql'. Template: '/opt/***/sql/create_log_tables.sql'
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/abstractoperator.py", line 717, in _do_render_template_fields
    rendered_content = self.render_template(
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/template/templater.py", line 166, in render_template
    template = jinja_env.get_template(value)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 1010, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 969, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 125, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 204, in get_source
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: /opt/airflow/sql/create_log_tables.sql
[2025-07-16T15:17:25.092+0000] {taskinstance.py:2905} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 2479, in _run_raw_task
    self._execute_task_with_callbacks(context, test_mode, session=session)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 2633, in _execute_task_with_callbacks
    task_orig = self.render_templates(context=context, jinja_env=jinja_env)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3094, in render_templates
    original_task.render_template_fields(context, jinja_env)
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 1336, in render_template_fields
    self._do_render_template_fields(self, self.template_fields, context, jinja_env, set())
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/abstractoperator.py", line 717, in _do_render_template_fields
    rendered_content = self.render_template(
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/template/templater.py", line 166, in render_template
    template = jinja_env.get_template(value)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 1010, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/environment.py", line 969, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 125, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/jinja2/loaders.py", line 204, in get_source
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: /opt/airflow/sql/create_log_tables.sql
[2025-07-16T15:17:25.108+0000] {taskinstance.py:1206} INFO - Marking task as UP_FOR_RETRY. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T151724, end_date=20250716T151725
[2025-07-16T15:17:25.127+0000] {standard_task_runner.py:110} ERROR - Failed to execute job 2 for task init_logging_tables (/opt/airflow/sql/create_log_tables.sql; 201)
[2025-07-16T15:17:25.165+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 1
[2025-07-16T15:17:25.188+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T15:17:25.212+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2025-07-16T15:17:25.214+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T15:37:39.482+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T15:37:39.525+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:37:39.534+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T15:37:39.535+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T15:37:39.548+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T15:37:39.557+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=201) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T15:37:39.558+0000] {standard_task_runner.py:63} INFO - Started process 202 to run task
[2025-07-16T15:37:39.558+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmprtjegch_']
[2025-07-16T15:37:39.559+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T15:37:39.575+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T15:37:39.612+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 0cebe846fd9f
[2025-07-16T15:37:39.706+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T15:37:39.707+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T15:37:39.731+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T15:37:39.732+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T15:37:39.732+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T15:37:39.734+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T15:37:39.739+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T15:37:39.745+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T15:37:39.760+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T153739, end_date=20250716T153739
[2025-07-16T15:37:39.812+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T15:37:39.830+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T15:37:39.846+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T15:37:39.848+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:11:14.040+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:11:14.075+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:11:14.083+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:11:14.083+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:11:14.094+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:11:14.102+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=234) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T16:11:14.103+0000] {standard_task_runner.py:63} INFO - Started process 235 to run task
[2025-07-16T16:11:14.103+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmpp5ul2cpb']
[2025-07-16T16:11:14.106+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:11:14.124+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:11:14.167+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 3f78294f0070
[2025-07-16T16:11:14.266+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:11:14.267+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:11:14.300+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:11:14.301+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:11:14.302+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:11:14.304+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:11:14.318+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:11:14.324+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:11:14.336+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T161114, end_date=20250716T161114
[2025-07-16T16:11:14.357+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:11:14.370+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:11:14.385+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:11:14.386+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:20:15.127+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:20:15.166+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:20:15.174+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:20:15.174+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:20:15.186+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:20:15.193+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=201) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T16:20:15.194+0000] {standard_task_runner.py:63} INFO - Started process 202 to run task
[2025-07-16T16:20:15.194+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmpecn1d_41']
[2025-07-16T16:20:15.195+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:20:15.209+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:20:15.261+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 3a97a985f8ee
[2025-07-16T16:20:15.351+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:20:15.352+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:20:15.375+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:20:15.375+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:20:15.376+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:20:15.378+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:20:15.386+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:20:15.390+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:20:15.403+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T162015, end_date=20250716T162015
[2025-07-16T16:20:15.448+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:20:15.460+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:20:15.477+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:20:15.478+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:23:07.286+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:23:07.321+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:23:07.328+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:23:07.329+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:23:07.339+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:23:07.347+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=224) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T16:23:07.348+0000] {standard_task_runner.py:63} INFO - Started process 225 to run task
[2025-07-16T16:23:07.347+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmpaeohlw_1']
[2025-07-16T16:23:07.349+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:23:07.362+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:23:07.402+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host fee2a1e1d73e
[2025-07-16T16:23:07.489+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:23:07.489+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:23:07.514+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:23:07.515+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:23:07.515+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:23:07.516+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:23:07.524+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:23:07.529+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:23:07.545+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T162307, end_date=20250716T162307
[2025-07-16T16:23:07.561+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:23:07.579+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:23:07.607+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:23:07.609+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:29:41.594+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:29:41.630+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:29:41.638+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:29:41.639+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:29:41.651+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:29:41.659+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=201) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T16:29:41.660+0000] {standard_task_runner.py:63} INFO - Started process 202 to run task
[2025-07-16T16:29:41.659+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmp55yvz15t']
[2025-07-16T16:29:41.661+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:29:41.677+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:29:41.721+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 07a1f2c7fa0b
[2025-07-16T16:29:41.819+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:29:41.820+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:29:41.852+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:29:41.853+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:29:41.854+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:29:41.856+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:29:41.862+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:29:41.867+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:29:41.881+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T162941, end_date=20250716T162941
[2025-07-16T16:29:41.914+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:29:41.935+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:29:41.961+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:29:41.963+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:43:35.605+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:43:35.640+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:43:35.648+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:43:35.648+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:43:35.659+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:43:35.666+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=389) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T16:43:35.667+0000] {standard_task_runner.py:63} INFO - Started process 390 to run task
[2025-07-16T16:43:35.670+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmpbwh11wwm']
[2025-07-16T16:43:35.672+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:43:35.686+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:43:35.724+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 6033db535fcd
[2025-07-16T16:43:35.817+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:43:35.818+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:43:35.841+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:43:35.842+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:43:35.843+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:43:35.844+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:43:35.850+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:43:35.855+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:43:35.865+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T164335, end_date=20250716T164335
[2025-07-16T16:43:35.881+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:43:35.908+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:43:35.941+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:43:35.942+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:46:28.765+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:46:28.805+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:46:28.814+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:46:28.814+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:46:28.826+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:46:28.838+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=217) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-07-16T16:46:28.839+0000] {standard_task_runner.py:63} INFO - Started process 218 to run task
[2025-07-16T16:46:28.838+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmphmajizqv']
[2025-07-16T16:46:28.840+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:46:28.856+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:46:28.890+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host f8c2cd69d5df
[2025-07-16T16:46:28.985+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:46:28.986+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:46:29.011+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:46:29.011+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:46:29.012+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:46:29.013+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:46:29.027+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:46:29.036+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:46:29.049+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T164628, end_date=20250716T164629
[2025-07-16T16:46:29.093+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:46:29.118+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:46:29.148+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:46:29.149+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:51:35.027+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:51:35.068+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:51:35.078+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:51:35.079+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:51:35.093+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:51:35.099+0000] {standard_task_runner.py:63} INFO - Started process 263 to run task
[2025-07-16T16:51:35.104+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmp__x5yiix']
[2025-07-16T16:51:35.106+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:51:35.123+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.10/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:51:35.164+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 039da2dd7cbf
[2025-07-16T16:51:35.249+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:51:35.250+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:51:35.272+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:51:35.273+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:51:35.274+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:51:35.276+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:51:35.282+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:51:35.288+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:51:35.300+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T165135, end_date=20250716T165135
[2025-07-16T16:51:35.357+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:51:35.386+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.10/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:51:35.417+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:51:35.420+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T16:57:36.160+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T16:57:36.190+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:57:36.198+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T16:57:36.198+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T16:57:36.209+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T16:57:36.215+0000] {standard_task_runner.py:63} INFO - Started process 218 to run task
[2025-07-16T16:57:36.218+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmp2cxffjx5']
[2025-07-16T16:57:36.220+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T16:57:36.238+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.10/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T16:57:36.278+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 130d0664bbcb
[2025-07-16T16:57:36.378+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T16:57:36.379+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T16:57:36.404+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T16:57:36.405+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T16:57:36.405+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:57:36.407+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T16:57:36.418+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T16:57:36.424+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T16:57:36.440+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T165736, end_date=20250716T165736
[2025-07-16T16:57:36.471+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T16:57:36.485+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.10/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T16:57:36.499+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T16:57:36.500+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
[2025-07-16T17:04:16.213+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-07-16T17:04:16.257+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T17:04:16.268+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [queued]>
[2025-07-16T17:04:16.268+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 3
[2025-07-16T17:04:16.282+0000] {taskinstance.py:2330} INFO - Executing <Task(PostgresOperator): init_logging_tables> on 2025-07-15 00:00:00+00:00
[2025-07-16T17:04:16.290+0000] {standard_task_runner.py:63} INFO - Started process 247 to run task
[2025-07-16T17:04:16.293+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'bank_data_pipeline', 'init_logging_tables', 'scheduled__2025-07-15T00:00:00+00:00', '--job-id', '2', '--raw', '--subdir', 'DAGS_FOLDER/bank_data_pipeline.py', '--cfg-path', '/tmp/tmphf4pyb7x']
[2025-07-16T17:04:16.296+0000] {standard_task_runner.py:91} INFO - Job 2: Subtask init_logging_tables
[2025-07-16T17:04:16.315+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.10/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2025-07-16T17:04:16.359+0000] {task_command.py:426} INFO - Running <TaskInstance: bank_data_pipeline.init_logging_tables scheduled__2025-07-15T00:00:00+00:00 [running]> on host 055183203c9b
[2025-07-16T17:04:16.450+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='data_engineering_team' AIRFLOW_CTX_DAG_ID='bank_data_pipeline' AIRFLOW_CTX_TASK_ID='init_logging_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-15T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-07-15T00:00:00+00:00'
[2025-07-16T17:04:16.451+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-07-16T17:04:16.478+0000] {sql.py:276} INFO - Executing: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;
[2025-07-16T17:04:16.479+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2025-07-16T17:04:16.480+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T17:04:16.482+0000] {base.py:84} INFO - Using connection ID 'postgres_data' for task execution.
[2025-07-16T17:04:16.491+0000] {sql.py:470} INFO - Running statement: -- Create logging tables for data pipeline
-- These tables will store pipeline execution logs, errors, and quality check results

-- 1. Pipeline execution log table
CREATE TABLE IF NOT EXISTS pipeline_execution_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100) NOT NULL,
    dag_id VARCHAR(100) NOT NULL,
    task_id VARCHAR(100) NOT NULL,
    execution_date TIMESTAMP NOT NULL,
    start_time TIMESTAMP DEFAULT NOW(),
    end_time TIMESTAMP,
    status VARCHAR(20) NOT NULL, -- SUCCESS, FAILED, RUNNING
    error_message TEXT,
    records_processed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Data quality check log table
CREATE TABLE IF NOT EXISTS data_quality_log (
    log_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    check_timestamp TIMESTAMP DEFAULT NOW(),
    table_name VARCHAR(100),
    check_type VARCHAR(50), -- NULL_CHECK, DUPLICATE_CHECK, BUSINESS_RULE, etc.
    issue_count INTEGER DEFAULT 0,
    issues_json TEXT, -- JSON array of specific issues
    status VARCHAR(20) NOT NULL, -- PASSED, FAILED
    execution_time_ms INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 3. Data upload error log table
CREATE TABLE IF NOT EXISTS data_upload_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50), -- DATABASE_ERROR, VALIDATION_ERROR, etc.
    error_message TEXT,
    failed_record_json TEXT, -- JSON of the record that failed
    retry_count INTEGER DEFAULT 0,
    resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 4. General pipeline error log table
CREATE TABLE IF NOT EXISTS pipeline_error_log (
    error_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    dag_id VARCHAR(100),
    task_id VARCHAR(100),
    error_timestamp TIMESTAMP DEFAULT NOW(),
    error_type VARCHAR(50),
    error_message TEXT,
    stack_trace TEXT,
    context_data TEXT, -- JSON with additional context
    severity VARCHAR(20) DEFAULT 'ERROR', -- ERROR, WARNING, CRITICAL
    created_at TIMESTAMP DEFAULT NOW()
);

-- 5. Data statistics table for monitoring
CREATE TABLE IF NOT EXISTS data_statistics_log (
    stat_id SERIAL PRIMARY KEY,
    run_id VARCHAR(100),
    table_name VARCHAR(100),
    stat_timestamp TIMESTAMP DEFAULT NOW(),
    record_count INTEGER,
    null_count INTEGER,
    duplicate_count INTEGER,
    avg_processing_time_ms INTEGER,
    min_value DECIMAL,
    max_value DECIMAL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_run_id ON pipeline_execution_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_status ON pipeline_execution_log(status);
CREATE INDEX IF NOT EXISTS idx_pipeline_execution_date ON pipeline_execution_log(execution_date);

CREATE INDEX IF NOT EXISTS idx_data_quality_run_id ON data_quality_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_quality_status ON data_quality_log(status);
CREATE INDEX IF NOT EXISTS idx_data_quality_table ON data_quality_log(table_name);

CREATE INDEX IF NOT EXISTS idx_upload_error_run_id ON data_upload_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_upload_error_resolved ON data_upload_error_log(resolved);
CREATE INDEX IF NOT EXISTS idx_upload_error_timestamp ON data_upload_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_pipeline_error_run_id ON pipeline_error_log(run_id);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_severity ON pipeline_error_log(severity);
CREATE INDEX IF NOT EXISTS idx_pipeline_error_timestamp ON pipeline_error_log(error_timestamp);

CREATE INDEX IF NOT EXISTS idx_data_stats_run_id ON data_statistics_log(run_id);
CREATE INDEX IF NOT EXISTS idx_data_stats_table ON data_statistics_log(table_name);

-- Create a view for easy monitoring of pipeline health
CREATE OR REPLACE VIEW pipeline_health_summary AS
SELECT 
    DATE(execution_date) as execution_date,
    dag_id,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN status = 'SUCCESS' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_runs,
    AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
    SUM(records_processed) as total_records_processed
FROM pipeline_execution_log 
WHERE execution_date >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(execution_date), dag_id
ORDER BY execution_date DESC, dag_id;

-- Create a view for data quality summary
CREATE OR REPLACE VIEW data_quality_summary AS
SELECT 
    DATE(check_timestamp) as check_date,
    table_name,
    check_type,
    COUNT(*) as total_checks,
    COUNT(CASE WHEN status = 'PASSED' THEN 1 END) as passed_checks,
    COUNT(CASE WHEN status = 'FAILED' THEN 1 END) as failed_checks,
    SUM(issue_count) as total_issues
FROM data_quality_log 
WHERE check_timestamp >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(check_timestamp), table_name, check_type
ORDER BY check_date DESC, table_name, check_type;

-- Insert sample data for testing (optional)
-- INSERT INTO pipeline_execution_log (run_id, dag_id, task_id, execution_date, status)
-- VALUES ('test_run_001', 'bank_data_pipeline', 'generate_data', NOW(), 'SUCCESS');

COMMIT;, parameters: None
[2025-07-16T17:04:16.498+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-07-16T17:04:16.508+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=bank_data_pipeline, task_id=init_logging_tables, run_id=scheduled__2025-07-15T00:00:00+00:00, execution_date=20250715T000000, start_date=20250716T170416, end_date=20250716T170416
[2025-07-16T17:04:16.546+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-07-16T17:04:16.565+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.10/site-packages/***/models/baseoperator.py:1296 AirflowProviderDeprecationWarning: Call to deprecated class PostgresOperator. (Please use `***.providers.common.sql.operators.sql.SQLExecuteQueryOperator`.Also, you can provide `hook_params={'schema': <database>}`.)
[2025-07-16T17:04:16.585+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-07-16T17:04:16.586+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
